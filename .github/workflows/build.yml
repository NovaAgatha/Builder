name: Build Kernel
on:
  workflow_dispatch:
    inputs:
      BRANCH:
        description: Kernel branch
        default: 'fourteen'
        required: true
      DEFCONFIG:
        description: Defconfig
        default: 'rsuntk_defconfig'
        required: true
      KSU:
        description: Add KernelSU support
        type: boolean
        
jobs:
  build:
    runs-on: ubuntu-latest
#    environment: telegramUpload
    steps:
    - uses: actions/checkout@v4
      with:
        repository: rsuntkOrgs/android_kernel_samsung_a23xq
        path: kernel_root
        ref: ${{ github.event.inputs.BRANCH }}
        show-progress: false
        fetch-depth: 1
        
    - name: Prepare dependencies
      run: |
        sudo apt update -y
        sudo apt install bc cpio flex bison aptitude git python-is-python3 tar perl wget curl lz4 -y
        sudo aptitude install libssl-dev -y
        
    - name: Fetch toolchains
      run: |
        mkdir toolchains
        cd toolchains
        git clone --depth=1 https://github.com/rsuntk/toolchains.git -b clang-11 clang-11
        git clone --depth=1 https://github.com/rsuntk/toolchains.git -b androidcc-4.9 google
      working-directory: kernel_root
    - name: Prepare timezone fix
      run: |
        sudo rm /etc/localtime
        sudo ln -s /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
      
    - name: Build kernel
      id: buildKernel
      run: |
        CLANG_VERSION=11 && echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV
        export PATH=$(pwd)/toolchains/clang-`echo $CLANG_VERSION`/bin:$PATH
        export CROSS_COMPILE=$(pwd)/toolchains/google/bin/aarch64-linux-android-
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export KBUILD_BUILD_USER="rsuntk"
        export KBUILD_BUILD_HOST="rsuntkOrgs"
        export BUILD_START=`date`
        export IS_CI=true
        export DEFCONFIG="${{ github.event.inputs.DEFCONFIG }}"
        export DEVICE="A236E"
        export DEVICE_ID="A23 5G"
        export KERNELSU="${{ github.event.inputs.KSU }}"
        export LLVM=1
        export LLVM_IAS=1
        
        bash $(pwd)/build.sh kernel --jobs $(nproc --all) `echo $DEFCONFIG`
        
        if [[ "${{ github.event.inputs.KSU }}" = "true" ]]; then
        	KSU_REV_COUNT=$(cd KernelSU && git rev-list --count HEAD)
        	KSU_VERSION=$(expr 10200 + $KSU_REV_COUNT)
        else	
          KSU_VERSION="No KernelSU"
        fi
        echo "- KernelSU version: $KSU_VERSION"
        
        echo ""
        echo "===================================================="
        strings out/arch/arm64/boot/Image | grep "Linux version"
        echo "===================================================="

        mv out/.config out/build_config.txt
        gitsha1=$(git rev-parse --short HEAD)
        buildDetails="`make kernelversion`-`echo $DEVICE`_`echo $gitsha1`-`date +'%Y%m%d%H%M%S'`" && echo "buildDetails=$buildDetails" >> $GITHUB_OUTPUT
      working-directory: kernel_root
      
    - name: Upload config
      uses: actions/upload-artifact@v4
      with:
        name: Config-${{ steps.buildKernel.outputs.buildDetails }}
        path: kernel_root/out/build_config.txt
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Build-${{ steps.buildKernel.outputs.buildDetails }}
        path: |
          kernel_root/out/arch/arm64/boot/*.gz
#          kernel_root/out/arch/arm64/boot/dts/exynos/*.dtb
#          kernel_root/out/arch/arm64/boot/dts/samsung/*.dtb

    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3-${{ steps.buildKernel.outputs.buildDetails }}
        path: kernel_root/AnyKernel3/*
        compression-level: 9
      
    - name: Check need LKM stripping
      id: need_strip
      run: |
        LKM=$(find $(pwd) -type f -name "*.ko")
        if [ "$LKM" = "" ]; then
          echo "UPLOAD=false" >> $GITHUB_OUTPUT
        else
          echo "UPLOAD=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Strip LKMs
      if: steps.need_strip.outputs.UPLOAD == 'true'
      run: |
        # Cleanup zip
        rm -rf *.zip

        # Create folder
        mkdir ../kernel_object_tmp
        mkdir kernel_object

        # Only move neccessary path!
        find $(pwd) -type f -name "*.ko" -exec mv {} ../kernel_object_tmp \;
        LIST=$(find ../kernel_object_tmp -type f -name "*.ko")

        # Start stripping
        for file in $LIST; do
          echo -e "- Stripping `basename $file`"
          $(pwd)/toolchains/clang-`echo $CLANG_VERSION`/bin/llvm-strip "$file" --strip-unneeded
        done
        mv ../kernel_object_tmp/*.ko $(pwd)/kernel_object/
      working-directory: kernel_root
        
    - name: Upload LKM
      if: steps.need_strip.outputs.UPLOAD == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: LKM-${{ steps.buildKernel.outputs.buildDetails }}
        path: kernel_root/kernel_object/*
